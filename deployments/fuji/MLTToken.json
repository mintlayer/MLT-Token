{
  "address": "0xd693250ACEcc40920Fd6b07Df46E1f092EB1Ae13",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "supply_",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "vestingTreeRoot_",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "vestingStartTimestamp_",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proofBalance_",
          "type": "bytes32[]"
        },
        {
          "internalType": "address[]",
          "name": "treasurers_",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        }
      ],
      "name": "AddedRoot",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "leafHash",
          "type": "bytes32"
        }
      ],
      "name": "VestedTokenGrant",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "root_",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "newRoot_",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proofBalance_",
          "type": "bytes32[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cliff",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "proof",
              "type": "bytes32[]"
            }
          ],
          "internalType": "struct MLTToken.VestingData[]",
          "name": "vestingSchedules_",
          "type": "tuple[]"
        }
      ],
      "name": "addRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "balanceByRootHash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cliff",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "proof",
              "type": "bytes32[]"
            }
          ],
          "internalType": "struct MLTToken.VestingData[]",
          "name": "vestingSchedules_",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes32",
          "name": "root_",
          "type": "bytes32"
        }
      ],
      "name": "batchReleaseVested",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "t",
          "type": "address"
        }
      ],
      "name": "isTreasurer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_cliff",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "_proof",
          "type": "bytes32[]"
        }
      ],
      "name": "releaseVested",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "rootWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "startTimestampByRootHash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_cliff",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "_proof",
          "type": "bytes32[]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "vestingClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8b6ac9a436a47e116d8135b6eeb89fad32d206103f2e7da98f58f8c56ca920ee",
  "receipt": {
    "to": null,
    "from": "0x59D01072675C1B90D617a20155AB078962fC5327",
    "contractAddress": "0xd693250ACEcc40920Fd6b07Df46E1f092EB1Ae13",
    "transactionIndex": 0,
    "gasUsed": "2121613",
    "logsBloom": "0x
    "blockHash": "0x286d3d73cab587932300bbdf276922c11d900331c18b0638967f4a5a96ec56cb",
    "transactionHash": "0x8b6ac9a436a47e116d8135b6eeb89fad32d206103f2e7da98f58f8c56ca920ee",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 17264053,
        "transactionHash": "0x8b6ac9a436a47e116d8135b6eeb89fad32d206103f2e7da98f58f8c56ca920ee",
        "address": "0xd693250ACEcc40920Fd6b07Df46E1f092EB1Ae13",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000059d01072675c1b90d617a20155ab078962fc5327"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x286d3d73cab587932300bbdf276922c11d900331c18b0638967f4a5a96ec56cb"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 17264053,
        "transactionHash": "0x8b6ac9a436a47e116d8135b6eeb89fad32d206103f2e7da98f58f8c56ca920ee",
        "address": "0xd693250ACEcc40920Fd6b07Df46E1f092EB1Ae13",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d693250acecc40920fd6b07df46e1f092eb1ae13"
        ],
        "data": "0x0000000000000000000000000000000000000000014adf4b7320334b90000000",
        "logIndex": 1,
        "blockHash": "0x286d3d73cab587932300bbdf276922c11d900331c18b0638967f4a5a96ec56cb"
      }
    ],
    "blockNumber": 17264053,
    "cumulativeGasUsed": "2121613",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "MLTToken",
    "MLT",
    400000000,
    "0x7c7b5c6f32878dcbcb31fb979d1575c3c54fa1eeb3e0f167ec9b993fc5ebfb67",
    1566259200,
    [
      "0x6b0dd1c82f5bb4f7269c507df58af80a2023b6e831ea2d910de48263d5e6c3fe",
      "0x8f23e0be2a7b4b4aed2e6d973a351abbdb63f41c5fbfa36724fda5366601693e",
      "0x81df752d5145e64ef647fbd0b590172af276b420a3b9a1cce21579dd7158f91a"
    ],
    [
      "0xBc67849Ae7A1dc56b457eC4FAA504023f6cBDDb5",
      "0xC076fDba9aC2c1144f52ee2aC9BD4f3317F79182",
      "0xe2A234EfF72C66B5Fa77D22449DaDcDC5f6558a9",
      "0x7179fDEf7bcC5a81ca87809068E56235b2A98225",
      "0x974F4D27550df2a89f682aB9A3e64920293a300d",
      "0xd51c8fccbd3CdC5484baaac3B7cEaF8b2b364a24",
      "0x4a5F795eD0905019c947C8BcC3d026498DE0B849",
      "0x95CB237CEbcDeEfF8862727c874B2B4d7225bE2A",
      "0x5ae5851Bb09e99e7c19e12986142B5A8053bdC8e",
      "0x2392EEEfcfcC42118cB11ACE7e6dB3cAA6Dc4E0C"
    ]
  ],
  "numDeployments": 2,
  "solcInputHash": "79e2bc8566b1dde8b76987107e7b518e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"supply_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"vestingTreeRoot_\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"vestingStartTimestamp_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proofBalance_\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"treasurers_\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"AddedRoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"leafHash\",\"type\":\"bytes32\"}],\"name\":\"VestedTokenGrant\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"newRoot_\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proofBalance_\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct MLTToken.VestingData[]\",\"name\":\"vestingSchedules_\",\"type\":\"tuple[]\"}],\"name\":\"addRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"balanceByRootHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct MLTToken.VestingData[]\",\"name\":\"vestingSchedules_\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"root_\",\"type\":\"bytes32\"}],\"name\":\"batchReleaseVested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"}],\"name\":\"isTreasurer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliff\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"releaseVested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"rootWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"startTimestampByRootHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliff\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"vestingClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addRoot(bytes32,bytes32,uint256,bytes32[],(address,uint256,uint256,bytes32[])[])\":{\"details\":\"Add a new merkle tree hash\",\"params\":{\"amount_\":\"Balance that is assigned to new merkle tree\",\"newRoot_\":\"New merkle tree root\",\"proofBalance_\":\"Merkle proof\",\"root_\":\"Merkle tree root of treasurer\",\"vestingSchedules_\":\"Array of vestingData*\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"batchReleaseVested((address,uint256,uint256,bytes32[])[],bytes32)\":{\"details\":\"Release vesting in batches\",\"params\":{\"root_\":\"Merkle tree root*\",\"vestingSchedules_\":\"Array of vesting schedule\"}},\"constructor\":{\"params\":{\"name_\":\"Name of ERC20 token\",\"proofBalance_\":\"Proof of total balance\",\"supply_\":\"Supply of ERC20 token\",\"symbol_\":\"Symbol of ERC20 token\",\"treasurers_\":\"Addresses of authorized treasurers*\",\"vestingStartTimestamp_\":\"Timestamp of vesting start as seconds since the Unix epoch\",\"vestingTreeRoot_\":\"Vesting tree root hash\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"releaseVested(address,uint256,uint256,bytes32,bytes32[])\":{\"details\":\"Release vesting associated with an address\",\"params\":{\"_amount\":\"Amount vested tokens to be released\",\"_beneficiary\":\"Address of beneficiary\",\"_cliff\":\"Lock delay for release\",\"_proof\":\"Merkle proof*\",\"_root\":\"Merkle tree root\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"verifyProof(address,uint256,uint256,bytes32,bytes32[])\":{\"details\":\"Verify the validity of merkle proof associated with an address\",\"params\":{\"_amount\":\"Amount vested tokens to be released\",\"_beneficiary\":\"Address of beneficiary\",\"_cliff\":\"Lock delay for release\",\"_proof\":\"Merkle proof*\",\"_root\":\"Merkle tree root\"}}},\"stateVariables\":{\"_treasurers\":{\"details\":\"Addresses of authorized treasurers Treasurer => true|false*\"},\"balanceByRootHash\":{\"details\":\"Total balance of vesting tree by root hash Root hash => balance*\"},\"rootWhitelist\":{\"details\":\"Root hash record of valid vesting trees Root hash => valid*\"},\"startTimestampByRootHash\":{\"details\":\"Timestamp start of the allocation as seconds since the Unix epoch by root hash Root hash => timestamp*\"},\"vestingClaimed\":{\"details\":\"Record of user withdrawals by cliff leaf = keccak256(abi.encodePacked(_beneficiary, _amount, _cliff)) leaf => claimed*\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MLTToken.sol\":\"MLTToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"},\"contracts/MLTToken.sol\":{\"content\":\"/// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/utils/cryptography/MerkleProof.sol';\\n\\ncontract MLTToken is ERC20, Ownable {\\n\\tstruct VestingData {\\n\\t\\taddress beneficiary;\\n\\t\\tuint256 amount;\\n\\t\\tuint256 cliff;\\n\\t\\tbytes32[] proof;\\n\\t}\\n\\n\\t/* BEGIN VARIABLES */\\n\\t/**\\n\\t * @dev Record of user withdrawals by cliff\\n\\t * leaf = keccak256(abi.encodePacked(_beneficiary, _amount, _cliff))\\n\\t * leaf => claimed\\n\\t**/\\n\\tmapping(bytes32 => bool) public vestingClaimed;\\n\\n\\t/**\\n\\t * @dev Total balance of vesting tree by root hash\\n\\t * Root hash => balance\\n\\t**/\\n\\tmapping(bytes32 => uint256) public balanceByRootHash;\\n\\n\\t/**\\n\\t * @dev Timestamp start of the allocation as seconds since the Unix epoch by root hash\\n\\t * Root hash => timestamp\\n\\t**/\\n\\tmapping(bytes32 => uint256) public startTimestampByRootHash;\\n\\n\\t/**\\n\\t * @dev Root hash record of valid vesting trees\\n\\t * Root hash => valid\\n\\t**/\\n\\tmapping(bytes32 => bool) public rootWhitelist;\\n\\n\\t/**\\n\\t * @dev Addresses of authorized treasurers\\n\\t * Treasurer => true|false\\n\\t**/\\n\\tmapping(address => bool) private _treasurers;\\n\\t/* END VARIABLES */\\n\\n\\t/**\\n\\t * @dev Throws if is not valid root\\n\\t**/\\n\\tmodifier validRoot(bytes32 _root) {\\n\\t\\trequire(rootWhitelist[_root], \\\"Is not valid root\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Throws if is not treasurer\\n\\t**/\\n\\tmodifier onlyTreasurer() {\\n\\t\\trequire(_treasurers[msg.sender], \\\"Caller is not a treasurer\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tevent AddedRoot(bytes32 indexed root);\\n\\tevent VestedTokenGrant(bytes32 indexed leafHash);\\n\\n\\t/**\\n\\t * @param name_ Name of ERC20 token\\n\\t * @param symbol_ Symbol of ERC20 token\\n\\t * @param supply_ Supply of ERC20 token\\n\\t * @param vestingTreeRoot_ Vesting tree root hash\\n\\t * @param vestingStartTimestamp_ Timestamp of vesting start as seconds since the Unix epoch\\n\\t * @param proofBalance_ Proof of total balance\\n\\t * @param treasurers_ Addresses of authorized treasurers\\n\\t **/\\n\\tconstructor(\\n\\t\\tstring memory name_,\\n\\t\\tstring memory symbol_,\\n\\t\\tuint256 supply_,\\n\\t\\tbytes32 vestingTreeRoot_,\\n\\t\\tuint256 vestingStartTimestamp_,\\n\\t\\tbytes32[] memory proofBalance_,\\n\\t\\taddress[] memory treasurers_\\n\\t) ERC20(name_, symbol_) {\\n\\t\\tuint256 supply = supply_ * uint256(10)**decimals();\\n\\t\\tbytes32 leaf = keccak256(abi.encodePacked(supply));\\n\\n\\t\\trequire(\\n\\t\\t\\tMerkleProof.verify(proofBalance_, vestingTreeRoot_, leaf),\\n\\t\\t\\t'The total supply of the contract does not match that of the merketree'\\n\\t\\t);\\n\\n\\t\\tfor(uint256 i = 0; i < treasurers_.length; i++) {\\n\\t\\t\\t_treasurers[treasurers_[i]] = true;\\n\\t\\t}\\n\\n\\t\\trootWhitelist[vestingTreeRoot_] = true;\\n\\t\\tbalanceByRootHash[vestingTreeRoot_] = supply;\\n\\t\\tstartTimestampByRootHash[vestingTreeRoot_] = vestingStartTimestamp_;\\n\\n\\t\\t_mint(address(this), supply);\\n\\t}\\n\\n\\tfunction isTreasurer(address t) view external returns(bool) {\\n\\t\\treturn _treasurers[t];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Verify the validity of merkle proof associated with an address\\n\\t * @param _beneficiary Address of beneficiary\\n\\t * @param _amount Amount vested tokens to be released\\n\\t * @param _cliff Lock delay for release\\n\\t * @param _root Merkle tree root\\n\\t * @param _proof Merkle proof\\n\\t**/\\n\\tfunction verifyProof(\\n\\t\\taddress _beneficiary,\\n\\t\\tuint256 _amount,\\n\\t\\tuint256 _cliff,\\n\\t\\tbytes32 _root,\\n\\t\\tbytes32[] calldata _proof\\n\\t) external view returns(bool) {\\n\\t\\tif(!rootWhitelist[_root]) return false;\\n\\t\\tbytes32 _leaf = keccak256(abi.encodePacked(_beneficiary, _amount, _cliff));\\n\\t\\treturn MerkleProof.verify(_proof, _root, _leaf);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Add a new merkle tree hash\\n\\t * @param root_ Merkle tree root of treasurer\\n\\t * @param newRoot_ New merkle tree root\\n\\t * @param amount_ Balance that is assigned to new merkle tree\\n\\t * @param proofBalance_ Merkle proof\\n\\t * @param vestingSchedules_ Array of vestingData\\n\\t**/\\n\\tfunction addRoot(\\n\\t\\tbytes32 root_,\\n\\t\\tbytes32 newRoot_,\\n\\t\\tuint256 amount_,\\n\\t\\tbytes32[] calldata proofBalance_,\\n\\t\\tVestingData[] calldata vestingSchedules_\\n\\t) external onlyTreasurer {\\n\\t\\tbytes32 leafBalance = keccak256(abi.encodePacked(amount_));\\n\\t\\trequire(\\n\\t\\t\\tMerkleProof.verify(proofBalance_, newRoot_, leafBalance),\\n\\t\\t\\t'The supply sent does not match that of the merketree'\\n\\t\\t);\\n\\n\\t\\tbytes32 r = root_;\\n\\t\\tuint256 balance = 0;\\n\\n\\t\\tfor(uint256 i = 0; i < vestingSchedules_.length; i++) {\\n\\t\\t\\t(\\n\\t\\t\\t\\taddress beneficiary,\\n\\t\\t\\t\\tuint256 amount,\\n\\t\\t\\t\\tuint256 cliff,\\n\\t\\t\\t\\tbytes32[] calldata proof\\n\\t\\t\\t) = _splitVestingSchedule(vestingSchedules_[i]);\\n\\n\\t\\t\\trequire(beneficiary == msg.sender, \\\"You can't claim tokens from another user\\\");\\n\\n\\t\\t\\tbytes32 leaf = keccak256(abi.encodePacked(beneficiary, amount, cliff));\\n\\n\\t\\t\\tif(!vestingClaimed[leaf]) {\\n\\t\\t\\t\\trequire(\\n\\t\\t\\t\\t\\tMerkleProof.verify(proof, r, leaf), 'Invalid merkle proof'\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\trequire(balanceByRootHash[r] >= amount, 'Supply is not enough to claim allocation');\\n\\n\\t\\t\\t\\tvestingClaimed[leaf] = true;\\n\\t\\t\\t\\tbalanceByRootHash[r] -= amount;\\n\\t\\t\\t\\tbalance += amount;\\n\\n\\t\\t\\t\\temit VestedTokenGrant(leaf);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\trequire(!rootWhitelist[newRoot_], 'Root hash already exists');\\n\\t\\trequire(amount_ == balance, 'Amount is different from balance');\\n\\n\\t\\trootWhitelist[newRoot_] = true;\\n\\t\\tbalanceByRootHash[newRoot_] = amount_;\\n\\t\\tstartTimestampByRootHash[newRoot_] = startTimestampByRootHash[r];\\n\\n\\t\\temit AddedRoot(newRoot_);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Release vesting in batches\\n\\t * @param vestingSchedules_ Array of vesting schedule\\n\\t * @param root_ Merkle tree root\\n\\t**/\\n\\tfunction batchReleaseVested(VestingData[] calldata vestingSchedules_, bytes32 root_) external {\\n\\t\\tfor(uint256 i = 0; i < vestingSchedules_.length; i++) {\\n\\t\\t\\t(\\n\\t\\t\\t\\taddress beneficiary,\\n\\t\\t\\t\\tuint256 amount,\\n\\t\\t\\t\\tuint256 cliff,\\n\\t\\t\\t\\tbytes32[] calldata proof\\n\\t\\t\\t) = _splitVestingSchedule(vestingSchedules_[i]);\\n\\n\\t\\t\\tbytes32 _leaf = keccak256(abi.encodePacked(beneficiary, amount, cliff));\\n\\t\\t\\tif(!vestingClaimed[_leaf]) _releaseVested(beneficiary, amount, cliff, root_, proof);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Release vesting associated with an address\\n\\t * @param _beneficiary Address of beneficiary\\n\\t * @param _amount Amount vested tokens to be released\\n\\t * @param _cliff Lock delay for release\\n\\t * @param _root Merkle tree root\\n\\t * @param _proof Merkle proof\\n\\t**/\\n\\tfunction releaseVested(\\n\\t\\taddress _beneficiary,\\n\\t\\tuint256 _amount,\\n\\t\\tuint256 _cliff,\\n\\t\\tbytes32 _root,\\n\\t\\tbytes32[] calldata _proof\\n\\t) external {\\n\\t\\t_releaseVested(_beneficiary, _amount, _cliff, _root, _proof);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Release vesting associated with an address\\n\\t * @param beneficiary_ Address of beneficiary\\n\\t * @param amount_ Amount vested tokens to be released\\n\\t * @param cliff_ Lock delay for release\\n\\t * @param root_ Merkle tree root\\n\\t * @param proof_ Merkle proof\\n\\t**/\\n\\tfunction _releaseVested(\\n\\t\\taddress beneficiary_,\\n\\t\\tuint256 amount_,\\n\\t\\tuint256 cliff_,\\n\\t\\tbytes32 root_,\\n\\t\\tbytes32[] calldata proof_\\n\\t) internal validRoot(root_) {\\n\\t\\tbytes32 leaf = keccak256(abi.encodePacked(beneficiary_, amount_, cliff_));\\n\\n\\t\\trequire(\\n\\t\\t\\tMerkleProof.verify(proof_, root_, leaf), 'Invalid merkle proof'\\n\\t\\t);\\n\\n\\t\\trequire(!vestingClaimed[leaf], 'Tokens already claimed');\\n\\t\\trequire(balanceByRootHash[root_] >= amount_, 'Supply is not enough to claim allocation');\\n\\t\\trequire(\\n\\t\\t\\tblock.timestamp >= startTimestampByRootHash[root_] + cliff_,\\n\\t\\t\\t\\\"The release date has not yet arrived\\\"\\n\\t\\t);\\n\\n\\t\\trequire(!_treasurers[beneficiary_], \\\"Treasurers can't claim tokens\\\");\\n\\n\\t\\tvestingClaimed[leaf] = true;\\n\\t\\tbalanceByRootHash[root_] -= amount_;\\n\\t\\t_transfer(address(this), beneficiary_, amount_);\\n\\n\\t\\temit VestedTokenGrant(leaf);\\n\\t}\\n\\n\\tfunction _splitVestingSchedule(VestingData calldata _user) internal pure returns(\\n\\t\\taddress beneficiary,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 cliff,\\n\\t\\tbytes32[] calldata proof\\n\\t) {\\n\\t\\treturn (_user.beneficiary, _user.amount, _user.cliff, _user.proof);\\n\\t}\\n}\\n\",\"keccak256\":\"0x20e1de39761aae5265e6c6f2fcdb8932ed82efe6659caadcf62d4ac0b108d8d7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620026e3380380620026e38339810160408190526200003491620005c9565b8651879087906200004d906003906020850190620003a8565b50805162000063906004906020840190620003a8565b505050620000806200007a620001db60201b60201c565b620001df565b60006200008c62000231565b6200009990600a620007ff565b620000a59087620008e4565b9050600081604051602001620000bc91906200069a565b604051602081830303815290604052805190602001209050620000ec8487836200023660201b62000bb61760201c565b620001145760405162461bcd60e51b81526004016200010b90620006a3565b60405180910390fd5b60005b83518110156200018f576001600a60008684815181106200014857634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580620001868162000943565b91505062000117565b506000868152600960209081526040808320805460ff191660011790556007825280832085905560089091529020859055620001cc308362000250565b5050505050505050506200098d565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b601290565b60008262000245858462000309565b1490505b9392505050565b6001600160a01b038216620002795760405162461bcd60e51b81526004016200010b906200070e565b620002876000838362000371565b80600260008282546200029b919062000797565b90915550506001600160a01b038216600081815260208190526040808220805485019055517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90620002ef9085906200069a565b60405180910390a3620003056000838362000371565b5050565b600081815b8451811015620003695762000352828683815181106200033e57634e487b7160e01b600052603260045260246000fd5b60200260200101516200037660201b60201c565b915080620003608162000943565b9150506200030e565b509392505050565b505050565b600081831062000392576200038c828462000399565b62000249565b6200024983835b60009182526020526040902090565b828054620003b69062000906565b90600052602060002090601f016020900481019282620003da576000855562000425565b82601f10620003f557805160ff191683800117855562000425565b8280016001018555821562000425579182015b828111156200042557825182559160200191906001019062000408565b506200043392915062000437565b5090565b5b8082111562000433576000815560010162000438565b600082601f8301126200045f578081fd5b8151602062000478620004728362000771565b62000745565b828152818101908583018385028701840188101562000495578586fd5b855b85811015620004ca5781516001600160a01b0381168114620004b7578788fd5b8452928401929084019060010162000497565b5090979650505050505050565b600082601f830112620004e8578081fd5b81516020620004fb620004728362000771565b828152818101908583018385028701840188101562000518578586fd5b855b85811015620004ca578151845292840192908401906001016200051a565b600082601f83011262000549578081fd5b81516001600160401b0381111562000565576200056562000977565b60206200057b601f8301601f1916820162000745565b82815285828487010111156200058f578384fd5b835b83811015620005ae57858101830151828201840152820162000591565b83811115620005bf57848385840101525b5095945050505050565b600080600080600080600060e0888a031215620005e4578283fd5b87516001600160401b0380821115620005fb578485fd5b620006098b838c0162000538565b985060208a01519150808211156200061f578485fd5b6200062d8b838c0162000538565b975060408a0151965060608a0151955060808a0151945060a08a015191508082111562000658578384fd5b620006668b838c01620004d7565b935060c08a01519150808211156200067c578283fd5b506200068b8a828b016200044e565b91505092959891949750929550565b90815260200190565b60208082526045908201527f54686520746f74616c20737570706c79206f662074686520636f6e747261637460408201527f20646f6573206e6f74206d617463682074686174206f6620746865206d65726b606082015264657472656560d81b608082015260a00190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b6040518181016001600160401b038111828210171562000769576200076962000977565b604052919050565b60006001600160401b038211156200078d576200078d62000977565b5060209081020190565b60008219821115620007ad57620007ad62000961565b500190565b80825b6001808611620007c65750620007f6565b818704821115620007db57620007db62000961565b80861615620007e957918102915b9490941c938002620007b5565b94509492505050565b60006200024960001960ff8516846000826200081e5750600162000249565b816200082d5750600062000249565b8160018114620008465760028114620008515762000885565b600191505062000249565b60ff84111562000865576200086562000961565b6001841b9150848211156200087e576200087e62000961565b5062000249565b5060208310610133831016604e8410600b8410161715620008b7575081810a838111156200038c576200038c62000961565b620008c68484846001620007b2565b808604821115620008db57620008db62000961565b02949350505050565b600081600019048311821515161562000901576200090162000961565b500290565b6002810460018216806200091b57607f821691505b602082108114156200093d57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156200095a576200095a62000961565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b611d46806200099d6000396000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c80636846782f116100e35780639edbc3721161008c578063cc0d50e611610066578063cc0d50e614610318578063dd62ed3e1461032b578063f2fde38b1461033e5761018d565b80639edbc372146102df578063a457c2d7146102f2578063a9059cbb146103055761018d565b80638d22c741116100bd5780638d22c741146102af5780638da5cb5b146102c257806395d89b41146102d75761018d565b80636846782f1461028157806370a0823114610294578063715018a6146102a75761018d565b8063313ce567116101455780633ea166821161011f5780633ea16682146102485780635166d4401461025b57806366f809ac1461026e5761018d565b8063313ce5671461020d57806339509351146102225780633d1851c4146102355761018d565b806318160ddd1161017657806318160ddd146101d057806323b872dd146101e55780632790100c146101f85761018d565b806306fdde0314610192578063095ea7b3146101b0575b600080fd5b61019a610351565b6040516101a7919061151a565b60405180910390f35b6101c36101be366004611324565b6103e3565b6040516101a7919061150f565b6101d8610405565b6040516101a791906114e5565b6101c36101f33660046112e9565b61040b565b61020b6102063660046113bc565b610439565b005b61021561053a565b6040516101a79190611b75565b6101c3610230366004611324565b61053f565b61020b61024336600461134d565b61056b565b6101c3610256366004611406565b610581565b6101c361026936600461134d565b610596565b6101c361027c366004611406565b610631565b61020b61028f36600461141e565b610646565b6101d86102a236600461129d565b610a1d565b61020b610a49565b6101d86102bd366004611406565b610a5d565b6102ca610a6f565b6040516101a791906114ee565b61019a610a8b565b6101d86102ed366004611406565b610a9a565b6101c3610300366004611324565b610aac565b6101c3610313366004611324565b610af4565b6101c361032636600461129d565b610b0c565b6101d86103393660046112b7565b610b37565b61020b61034c36600461129d565b610b6f565b60606003805461036090611c54565b80601f016020809104026020016040519081016040528092919081815260200182805461038c90611c54565b80156103d95780601f106103ae576101008083540402835291602001916103d9565b820191906000526020600020905b8154815290600101906020018083116103bc57829003601f168201915b5050505050905090565b6000806103ee610bcc565b90506103fb818585610bd0565b5060019392505050565b60025490565b600080610416610bcc565b9050610423858285610cab565b61042e858585610d0d565b506001949350505050565b60005b8281101561053457600080600036600061049f898988818110610488577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200281019061049a9190611be8565b610e42565b9450945094509450945060008585856040516020016104c0939291906114a8565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815281516020928301206000818152600690935291205490915060ff1661051b5761051b8686868b8787610e7e565b505050505050808061052c90611ca8565b91505061043c565b50505050565b601290565b60008061054a610bcc565b90506103fb81858561055c8589610b37565b6105669190611c25565b610bd0565b610579868686868686610e7e565b505050505050565b60066020526000908152604090205460ff1681565b60008381526009602052604081205460ff166105b457506000610627565b60008787876040516020016105cb939291906114a8565b604051602081830303815290604052805190602001209050610623848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250859150610bb69050565b9150505b9695505050505050565b60096020526000908152604090205460ff1681565b336000908152600a602052604090205460ff1661067e5760405162461bcd60e51b815260040161067590611a27565b60405180910390fd5b60008560405160200161069191906114e5565b6040516020818303038152906040528051906020012090506106e98585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508b9250859150610bb69050565b6107055760405162461bcd60e51b815260040161067590611a5e565b876000805b848110156109455760008060003660006107568b8b88818110610488577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b945094509450945094503373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146107ab5760405162461bcd60e51b8152600401610675906117a2565b60008585856040516020016107c2939291906114a8565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815281516020928301206000818152600690935291205490915060ff1661092c5761084f8383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508d9250859150610bb69050565b61086b5760405162461bcd60e51b8152600401610675906118ff565b6000898152600760205260409020548511156108995760405162461bcd60e51b815260040161067590611abb565b600081815260066020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558b83526007909152812080548792906108ed908490611c3d565b909155506108fd90508589611c25565b60405190985081907f81df9be81a1e520bb17ab54843276df78fe5510181714e04451a5d10191475b190600090a25b505050505050808061093d90611ca8565b91505061070a565b5060008981526009602052604090205460ff16156109755760405162461bcd60e51b8152600401610675906115e8565b8088146109945760405162461bcd60e51b81526004016106759061161f565b600089815260096020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055600782528083208b90558483526008909152808220548b835281832055518a917f84b2306c1af1fc3a139e6c617f8f31cf5a55850bfb6f4536f64f8cf082f5269791a250505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152602081905260409020545b919050565b610a516110af565b610a5b6000611108565b565b60086020526000908152604090205481565b60055473ffffffffffffffffffffffffffffffffffffffff1690565b60606004805461036090611c54565b60076020526000908152604090205481565b600080610ab7610bcc565b90506000610ac58286610b37565b905083811015610ae75760405162461bcd60e51b815260040161067590611b18565b61042e8286868403610bd0565b600080610aff610bcc565b90506103fb818585610d0d565b73ffffffffffffffffffffffffffffffffffffffff166000908152600a602052604090205460ff1690565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b610b776110af565b73ffffffffffffffffffffffffffffffffffffffff8116610baa5760405162461bcd60e51b815260040161067590611654565b610bb381611108565b50565b600082610bc3858461117f565b14949350505050565b3390565b73ffffffffffffffffffffffffffffffffffffffff8316610c035760405162461bcd60e51b8152600401610675906119ca565b73ffffffffffffffffffffffffffffffffffffffff8216610c365760405162461bcd60e51b8152600401610675906116b1565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610c9e9085906114e5565b60405180910390a3505050565b6000610cb78484610b37565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146105345781811015610d005760405162461bcd60e51b81526004016106759061170e565b6105348484848403610bd0565b73ffffffffffffffffffffffffffffffffffffffff8316610d405760405162461bcd60e51b815260040161067590611936565b73ffffffffffffffffffffffffffffffffffffffff8216610d735760405162461bcd60e51b81526004016106759061158b565b610d7e8383836111f3565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205481811015610dc45760405162461bcd60e51b815260040161067590611745565b73ffffffffffffffffffffffffffffffffffffffff80851660008181526020819052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610e2f9086906114e5565b60405180910390a36105348484846111f3565b600080803681610e55602087018761129d565b60208701356040880135610e6c60608a018a611b83565b939a9299509097509550909350915050565b600083815260096020526040902054839060ff16610eae5760405162461bcd60e51b815260040161067590611893565b6000878787604051602001610ec5939291906114a8565b604051602081830303815290604052805190602001209050610f1d848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250859150610bb69050565b610f395760405162461bcd60e51b8152600401610675906118ff565b60008181526006602052604090205460ff1615610f685760405162461bcd60e51b815260040161067590611993565b600085815260076020526040902054871115610f965760405162461bcd60e51b815260040161067590611abb565b600085815260086020526040902054610fb0908790611c25565b421015610fcf5760405162461bcd60e51b8152600401610675906117ff565b73ffffffffffffffffffffffffffffffffffffffff88166000908152600a602052604090205460ff16156110155760405162461bcd60e51b81526004016106759061185c565b600081815260066020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055878352600790915281208054899290611069908490611c3d565b9091555061107a9050308989610d0d565b60405181907f81df9be81a1e520bb17ab54843276df78fe5510181714e04451a5d10191475b190600090a25050505050505050565b6110b7610bcc565b73ffffffffffffffffffffffffffffffffffffffff166110d5610a6f565b73ffffffffffffffffffffffffffffffffffffffff1614610a5b5760405162461bcd60e51b8152600401610675906118ca565b6005805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600081815b84518110156111eb576111d7828683815181106111ca577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516111f8565b9150806111e381611ca8565b915050611184565b509392505050565b505050565b60008183106112105761120b8284611221565b61121a565b61121a8383611221565b9392505050565b60009182526020526040902090565b803573ffffffffffffffffffffffffffffffffffffffff81168114610a4457600080fd5b60008083601f840112611265578182fd5b50813567ffffffffffffffff81111561127c578182fd5b602083019150836020808302850101111561129657600080fd5b9250929050565b6000602082840312156112ae578081fd5b61121a82611230565b600080604083850312156112c9578081fd5b6112d283611230565b91506112e060208401611230565b90509250929050565b6000806000606084860312156112fd578081fd5b61130684611230565b925061131460208501611230565b9150604084013590509250925092565b60008060408385031215611336578182fd5b61133f83611230565b946020939093013593505050565b60008060008060008060a08789031215611365578182fd5b61136e87611230565b9550602087013594506040870135935060608701359250608087013567ffffffffffffffff81111561139e578283fd5b6113aa89828a01611254565b979a9699509497509295939492505050565b6000806000604084860312156113d0578283fd5b833567ffffffffffffffff8111156113e6578384fd5b6113f286828701611254565b909790965060209590950135949350505050565b600060208284031215611417578081fd5b5035919050565b600080600080600080600060a0888a031215611438578081fd5b873596506020880135955060408801359450606088013567ffffffffffffffff80821115611464578283fd5b6114708b838c01611254565b909650945060808a0135915080821115611488578283fd5b506114958a828b01611254565b989b979a50959850939692959293505050565b60609390931b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001683526014830191909152603482015260540190565b90815260200190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b901515815260200190565b6000602080835283518082850152825b818110156115465785810183015185820160400152820161152a565b818111156115575783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201527f6573730000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526018908201527f526f6f74206861736820616c7265616479206578697374730000000000000000604082015260600190565b6020808252818101527f416d6f756e7420697320646966666572656e742066726f6d2062616c616e6365604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560408201527f7373000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604082015260600190565b60208082526026908201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260408201527f616c616e63650000000000000000000000000000000000000000000000000000606082015260800190565b60208082526028908201527f596f752063616e277420636c61696d20746f6b656e732066726f6d20616e6f7460408201527f6865722075736572000000000000000000000000000000000000000000000000606082015260800190565b60208082526024908201527f5468652072656c65617365206461746520686173206e6f74207965742061727260408201527f6976656400000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f547265617375726572732063616e277420636c61696d20746f6b656e73000000604082015260600190565b60208082526011908201527f4973206e6f742076616c696420726f6f74000000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526014908201527f496e76616c6964206d65726b6c652070726f6f66000000000000000000000000604082015260600190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460408201527f6472657373000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526016908201527f546f6b656e7320616c726561647920636c61696d656400000000000000000000604082015260600190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460408201527f7265737300000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526019908201527f43616c6c6572206973206e6f7420612074726561737572657200000000000000604082015260600190565b60208082526034908201527f54686520737570706c792073656e7420646f6573206e6f74206d61746368207460408201527f686174206f6620746865206d65726b6574726565000000000000000000000000606082015260800190565b60208082526028908201527f537570706c79206973206e6f7420656e6f75676820746f20636c61696d20616c60408201527f6c6f636174696f6e000000000000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760408201527f207a65726f000000000000000000000000000000000000000000000000000000606082015260800190565b60ff91909116815260200190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112611bb7578283fd5b83018035915067ffffffffffffffff821115611bd1578283fd5b602090810192508102360382131561129657600080fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81833603018112611c1b578182fd5b9190910192915050565b60008219821115611c3857611c38611ce1565b500190565b600082821015611c4f57611c4f611ce1565b500390565b600281046001821680611c6857607f821691505b60208210811415611ca2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611cda57611cda611ce1565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea264697066735822122065c6a648640f14bfdeba17a62a7902910111cc8f9e4f36d18fad007bc02ecfe664736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018d5760003560e01c80636846782f116100e35780639edbc3721161008c578063cc0d50e611610066578063cc0d50e614610318578063dd62ed3e1461032b578063f2fde38b1461033e5761018d565b80639edbc372146102df578063a457c2d7146102f2578063a9059cbb146103055761018d565b80638d22c741116100bd5780638d22c741146102af5780638da5cb5b146102c257806395d89b41146102d75761018d565b80636846782f1461028157806370a0823114610294578063715018a6146102a75761018d565b8063313ce567116101455780633ea166821161011f5780633ea16682146102485780635166d4401461025b57806366f809ac1461026e5761018d565b8063313ce5671461020d57806339509351146102225780633d1851c4146102355761018d565b806318160ddd1161017657806318160ddd146101d057806323b872dd146101e55780632790100c146101f85761018d565b806306fdde0314610192578063095ea7b3146101b0575b600080fd5b61019a610351565b6040516101a7919061151a565b60405180910390f35b6101c36101be366004611324565b6103e3565b6040516101a7919061150f565b6101d8610405565b6040516101a791906114e5565b6101c36101f33660046112e9565b61040b565b61020b6102063660046113bc565b610439565b005b61021561053a565b6040516101a79190611b75565b6101c3610230366004611324565b61053f565b61020b61024336600461134d565b61056b565b6101c3610256366004611406565b610581565b6101c361026936600461134d565b610596565b6101c361027c366004611406565b610631565b61020b61028f36600461141e565b610646565b6101d86102a236600461129d565b610a1d565b61020b610a49565b6101d86102bd366004611406565b610a5d565b6102ca610a6f565b6040516101a791906114ee565b61019a610a8b565b6101d86102ed366004611406565b610a9a565b6101c3610300366004611324565b610aac565b6101c3610313366004611324565b610af4565b6101c361032636600461129d565b610b0c565b6101d86103393660046112b7565b610b37565b61020b61034c36600461129d565b610b6f565b60606003805461036090611c54565b80601f016020809104026020016040519081016040528092919081815260200182805461038c90611c54565b80156103d95780601f106103ae576101008083540402835291602001916103d9565b820191906000526020600020905b8154815290600101906020018083116103bc57829003601f168201915b5050505050905090565b6000806103ee610bcc565b90506103fb818585610bd0565b5060019392505050565b60025490565b600080610416610bcc565b9050610423858285610cab565b61042e858585610d0d565b506001949350505050565b60005b8281101561053457600080600036600061049f898988818110610488577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200281019061049a9190611be8565b610e42565b9450945094509450945060008585856040516020016104c0939291906114a8565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815281516020928301206000818152600690935291205490915060ff1661051b5761051b8686868b8787610e7e565b505050505050808061052c90611ca8565b91505061043c565b50505050565b601290565b60008061054a610bcc565b90506103fb81858561055c8589610b37565b6105669190611c25565b610bd0565b610579868686868686610e7e565b505050505050565b60066020526000908152604090205460ff1681565b60008381526009602052604081205460ff166105b457506000610627565b60008787876040516020016105cb939291906114a8565b604051602081830303815290604052805190602001209050610623848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250859150610bb69050565b9150505b9695505050505050565b60096020526000908152604090205460ff1681565b336000908152600a602052604090205460ff1661067e5760405162461bcd60e51b815260040161067590611a27565b60405180910390fd5b60008560405160200161069191906114e5565b6040516020818303038152906040528051906020012090506106e98585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508b9250859150610bb69050565b6107055760405162461bcd60e51b815260040161067590611a5e565b876000805b848110156109455760008060003660006107568b8b88818110610488577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b945094509450945094503373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146107ab5760405162461bcd60e51b8152600401610675906117a2565b60008585856040516020016107c2939291906114a8565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815281516020928301206000818152600690935291205490915060ff1661092c5761084f8383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508d9250859150610bb69050565b61086b5760405162461bcd60e51b8152600401610675906118ff565b6000898152600760205260409020548511156108995760405162461bcd60e51b815260040161067590611abb565b600081815260066020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558b83526007909152812080548792906108ed908490611c3d565b909155506108fd90508589611c25565b60405190985081907f81df9be81a1e520bb17ab54843276df78fe5510181714e04451a5d10191475b190600090a25b505050505050808061093d90611ca8565b91505061070a565b5060008981526009602052604090205460ff16156109755760405162461bcd60e51b8152600401610675906115e8565b8088146109945760405162461bcd60e51b81526004016106759061161f565b600089815260096020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055600782528083208b90558483526008909152808220548b835281832055518a917f84b2306c1af1fc3a139e6c617f8f31cf5a55850bfb6f4536f64f8cf082f5269791a250505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152602081905260409020545b919050565b610a516110af565b610a5b6000611108565b565b60086020526000908152604090205481565b60055473ffffffffffffffffffffffffffffffffffffffff1690565b60606004805461036090611c54565b60076020526000908152604090205481565b600080610ab7610bcc565b90506000610ac58286610b37565b905083811015610ae75760405162461bcd60e51b815260040161067590611b18565b61042e8286868403610bd0565b600080610aff610bcc565b90506103fb818585610d0d565b73ffffffffffffffffffffffffffffffffffffffff166000908152600a602052604090205460ff1690565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b610b776110af565b73ffffffffffffffffffffffffffffffffffffffff8116610baa5760405162461bcd60e51b815260040161067590611654565b610bb381611108565b50565b600082610bc3858461117f565b14949350505050565b3390565b73ffffffffffffffffffffffffffffffffffffffff8316610c035760405162461bcd60e51b8152600401610675906119ca565b73ffffffffffffffffffffffffffffffffffffffff8216610c365760405162461bcd60e51b8152600401610675906116b1565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610c9e9085906114e5565b60405180910390a3505050565b6000610cb78484610b37565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146105345781811015610d005760405162461bcd60e51b81526004016106759061170e565b6105348484848403610bd0565b73ffffffffffffffffffffffffffffffffffffffff8316610d405760405162461bcd60e51b815260040161067590611936565b73ffffffffffffffffffffffffffffffffffffffff8216610d735760405162461bcd60e51b81526004016106759061158b565b610d7e8383836111f3565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205481811015610dc45760405162461bcd60e51b815260040161067590611745565b73ffffffffffffffffffffffffffffffffffffffff80851660008181526020819052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610e2f9086906114e5565b60405180910390a36105348484846111f3565b600080803681610e55602087018761129d565b60208701356040880135610e6c60608a018a611b83565b939a9299509097509550909350915050565b600083815260096020526040902054839060ff16610eae5760405162461bcd60e51b815260040161067590611893565b6000878787604051602001610ec5939291906114a8565b604051602081830303815290604052805190602001209050610f1d848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250859150610bb69050565b610f395760405162461bcd60e51b8152600401610675906118ff565b60008181526006602052604090205460ff1615610f685760405162461bcd60e51b815260040161067590611993565b600085815260076020526040902054871115610f965760405162461bcd60e51b815260040161067590611abb565b600085815260086020526040902054610fb0908790611c25565b421015610fcf5760405162461bcd60e51b8152600401610675906117ff565b73ffffffffffffffffffffffffffffffffffffffff88166000908152600a602052604090205460ff16156110155760405162461bcd60e51b81526004016106759061185c565b600081815260066020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055878352600790915281208054899290611069908490611c3d565b9091555061107a9050308989610d0d565b60405181907f81df9be81a1e520bb17ab54843276df78fe5510181714e04451a5d10191475b190600090a25050505050505050565b6110b7610bcc565b73ffffffffffffffffffffffffffffffffffffffff166110d5610a6f565b73ffffffffffffffffffffffffffffffffffffffff1614610a5b5760405162461bcd60e51b8152600401610675906118ca565b6005805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600081815b84518110156111eb576111d7828683815181106111ca577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516111f8565b9150806111e381611ca8565b915050611184565b509392505050565b505050565b60008183106112105761120b8284611221565b61121a565b61121a8383611221565b9392505050565b60009182526020526040902090565b803573ffffffffffffffffffffffffffffffffffffffff81168114610a4457600080fd5b60008083601f840112611265578182fd5b50813567ffffffffffffffff81111561127c578182fd5b602083019150836020808302850101111561129657600080fd5b9250929050565b6000602082840312156112ae578081fd5b61121a82611230565b600080604083850312156112c9578081fd5b6112d283611230565b91506112e060208401611230565b90509250929050565b6000806000606084860312156112fd578081fd5b61130684611230565b925061131460208501611230565b9150604084013590509250925092565b60008060408385031215611336578182fd5b61133f83611230565b946020939093013593505050565b60008060008060008060a08789031215611365578182fd5b61136e87611230565b9550602087013594506040870135935060608701359250608087013567ffffffffffffffff81111561139e578283fd5b6113aa89828a01611254565b979a9699509497509295939492505050565b6000806000604084860312156113d0578283fd5b833567ffffffffffffffff8111156113e6578384fd5b6113f286828701611254565b909790965060209590950135949350505050565b600060208284031215611417578081fd5b5035919050565b600080600080600080600060a0888a031215611438578081fd5b873596506020880135955060408801359450606088013567ffffffffffffffff80821115611464578283fd5b6114708b838c01611254565b909650945060808a0135915080821115611488578283fd5b506114958a828b01611254565b989b979a50959850939692959293505050565b60609390931b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001683526014830191909152603482015260540190565b90815260200190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b901515815260200190565b6000602080835283518082850152825b818110156115465785810183015185820160400152820161152a565b818111156115575783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201527f6573730000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526018908201527f526f6f74206861736820616c7265616479206578697374730000000000000000604082015260600190565b6020808252818101527f416d6f756e7420697320646966666572656e742066726f6d2062616c616e6365604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560408201527f7373000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604082015260600190565b60208082526026908201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260408201527f616c616e63650000000000000000000000000000000000000000000000000000606082015260800190565b60208082526028908201527f596f752063616e277420636c61696d20746f6b656e732066726f6d20616e6f7460408201527f6865722075736572000000000000000000000000000000000000000000000000606082015260800190565b60208082526024908201527f5468652072656c65617365206461746520686173206e6f74207965742061727260408201527f6976656400000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f547265617375726572732063616e277420636c61696d20746f6b656e73000000604082015260600190565b60208082526011908201527f4973206e6f742076616c696420726f6f74000000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526014908201527f496e76616c6964206d65726b6c652070726f6f66000000000000000000000000604082015260600190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460408201527f6472657373000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526016908201527f546f6b656e7320616c726561647920636c61696d656400000000000000000000604082015260600190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460408201527f7265737300000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526019908201527f43616c6c6572206973206e6f7420612074726561737572657200000000000000604082015260600190565b60208082526034908201527f54686520737570706c792073656e7420646f6573206e6f74206d61746368207460408201527f686174206f6620746865206d65726b6574726565000000000000000000000000606082015260800190565b60208082526028908201527f537570706c79206973206e6f7420656e6f75676820746f20636c61696d20616c60408201527f6c6f636174696f6e000000000000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760408201527f207a65726f000000000000000000000000000000000000000000000000000000606082015260800190565b60ff91909116815260200190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112611bb7578283fd5b83018035915067ffffffffffffffff821115611bd1578283fd5b602090810192508102360382131561129657600080fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81833603018112611c1b578182fd5b9190910192915050565b60008219821115611c3857611c38611ce1565b500190565b600082821015611c4f57611c4f611ce1565b500390565b600281046001821680611c6857607f821691505b60208210811415611ca2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611cda57611cda611ce1565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea264697066735822122065c6a648640f14bfdeba17a62a7902910111cc8f9e4f36d18fad007bc02ecfe664736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addRoot(bytes32,bytes32,uint256,bytes32[],(address,uint256,uint256,bytes32[])[])": {
        "details": "Add a new merkle tree hash",
        "params": {
          "amount_": "Balance that is assigned to new merkle tree",
          "newRoot_": "New merkle tree root",
          "proofBalance_": "Merkle proof",
          "root_": "Merkle tree root of treasurer",
          "vestingSchedules_": "Array of vestingData*"
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "batchReleaseVested((address,uint256,uint256,bytes32[])[],bytes32)": {
        "details": "Release vesting in batches",
        "params": {
          "root_": "Merkle tree root*",
          "vestingSchedules_": "Array of vesting schedule"
        }
      },
      "constructor": {
        "params": {
          "name_": "Name of ERC20 token",
          "proofBalance_": "Proof of total balance",
          "supply_": "Supply of ERC20 token",
          "symbol_": "Symbol of ERC20 token",
          "treasurers_": "Addresses of authorized treasurers*",
          "vestingStartTimestamp_": "Timestamp of vesting start as seconds since the Unix epoch",
          "vestingTreeRoot_": "Vesting tree root hash"
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "releaseVested(address,uint256,uint256,bytes32,bytes32[])": {
        "details": "Release vesting associated with an address",
        "params": {
          "_amount": "Amount vested tokens to be released",
          "_beneficiary": "Address of beneficiary",
          "_cliff": "Lock delay for release",
          "_proof": "Merkle proof*",
          "_root": "Merkle tree root"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "verifyProof(address,uint256,uint256,bytes32,bytes32[])": {
        "details": "Verify the validity of merkle proof associated with an address",
        "params": {
          "_amount": "Amount vested tokens to be released",
          "_beneficiary": "Address of beneficiary",
          "_cliff": "Lock delay for release",
          "_proof": "Merkle proof*",
          "_root": "Merkle tree root"
        }
      }
    },
    "stateVariables": {
      "_treasurers": {
        "details": "Addresses of authorized treasurers Treasurer => true|false*"
      },
      "balanceByRootHash": {
        "details": "Total balance of vesting tree by root hash Root hash => balance*"
      },
      "rootWhitelist": {
        "details": "Root hash record of valid vesting trees Root hash => valid*"
      },
      "startTimestampByRootHash": {
        "details": "Timestamp start of the allocation as seconds since the Unix epoch by root hash Root hash => timestamp*"
      },
      "vestingClaimed": {
        "details": "Record of user withdrawals by cliff leaf = keccak256(abi.encodePacked(_beneficiary, _amount, _cliff)) leaf => claimed*"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 128,
        "contract": "contracts/MLTToken.sol:MLTToken",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 134,
        "contract": "contracts/MLTToken.sol:MLTToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 136,
        "contract": "contracts/MLTToken.sol:MLTToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 138,
        "contract": "contracts/MLTToken.sol:MLTToken",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 140,
        "contract": "contracts/MLTToken.sol:MLTToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/MLTToken.sol:MLTToken",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1350,
        "contract": "contracts/MLTToken.sol:MLTToken",
        "label": "vestingClaimed",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 1355,
        "contract": "contracts/MLTToken.sol:MLTToken",
        "label": "balanceByRootHash",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 1360,
        "contract": "contracts/MLTToken.sol:MLTToken",
        "label": "startTimestampByRootHash",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 1365,
        "contract": "contracts/MLTToken.sol:MLTToken",
        "label": "rootWhitelist",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 1370,
        "contract": "contracts/MLTToken.sol:MLTToken",
        "label": "_treasurers",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}